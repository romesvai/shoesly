import 'dart:math';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

part 'review_data_model.freezed.dart';

part 'review_data_model.g.dart';

@freezed
class ReviewDataModel with _$ReviewDataModel {
  const factory ReviewDataModel({
    required String reviewerName,
    required double reviewStars,
    required String description,
    required DateTime reviewDate,
  }) = _ReviewDataModel;

  const ReviewDataModel._();

  factory ReviewDataModel.fromFirestore(
    DocumentSnapshot<Map<String, dynamic>> snapshot,
  ) {
    final data = snapshot.data();
    if (data == null) {
      return ReviewDataModel(
        reviewerName: '',
        reviewStars: 0,
        description: '',
        reviewDate: DateTime.now(),
      );
    } else {
      return ReviewDataModel.fromJson(data);
    }
  }

  factory ReviewDataModel.fromJson(Map<String, Object?> json) =>
      _$ReviewDataModelFromJson(json);
}

List<ReviewDataModel> generateReviews() {
  final List<String> firstNames = [
    "John",
    "Jane",
    "Alex",
    "Emily",
    "Michael",
    "Sarah",
    "David",
    "Laura",
    "Chris",
    "Anna",
    "James",
    "Jessica",
    "Robert",
    "Linda",
    "William",
    "Karen",
    "Joseph",
    "Nancy",
    "Charles",
    "Lisa",
    "Thomas",
    "Betty",
    "Daniel",
    "Sandra",
    "Matthew",
    "Ashley",
    "Donald",
    "Kimberly",
    "Anthony",
    "Michelle",
    "Mark",
    "Patricia",
    "Paul",
    "Barbara",
    "Steven",
    "Susan",
    "Andrew",
    "Margaret",
    "Joshua",
    "Dorothy",
    "Kevin",
    "Carol",
    "Brian",
    "Elizabeth",
    "George",
    "Maria",
    "Edward",
    "Heather",
    "Jason",
    "Stephanie",
    "Ronald",
    "Rebecca",
    "Kenneth",
    "Sharon",
    "Ryan",
    "Amy",
    "Jacob",
    "Shirley",
    "Gary",
    "Angela",
    "Nicholas",
    "Cynthia",
    "Eric",
    "Kathleen",
    "Stephen",
    "Helen",
    "Jonathan",
    "Debra",
    "Larry",
    "Martha",
    "Scott",
    "Frances",
    "Frank",
    "Gloria",
    "Justin",
    "Catherine",
    "Brandon",
    "Ann",
    "Raymond",
    "Ruth",
    "Gregory",
    "Diana",
    "Benjamin",
    "Janet",
    "Samuel",
    "Joyce",
    "Patrick",
    "Julie",
    "Alexander",
    "Victoria",
    "Jack",
    "Kelly",
    "Dennis",
    "Christina",
    "Jerry",
    "Lauren",
    "Tyler",
    "Joan",
    "Aaron",
    "Judith"
  ];

  final List<String> lastNames = [
    "Smith",
    "Johnson",
    "Williams",
    "Brown",
    "Jones",
    "Garcia",
    "Miller",
    "Davis",
    "Rodriguez",
    "Martinez",
    "Hernandez",
    "Lopez",
    "Gonzalez",
    "Wilson",
    "Anderson",
    "Thomas",
    "Taylor",
    "Moore",
    "Jackson",
    "Martin",
    "Lee",
    "Perez",
    "Thompson",
    "White",
    "Harris",
    "Sanchez",
    "Clark",
    "Ramirez",
    "Lewis",
    "Robinson",
    "Walker",
    "Young",
    "Allen",
    "King",
    "Wright",
    "Scott",
    "Torres",
    "Nguyen",
    "Hill",
    "Flores",
    "Green",
    "Adams",
    "Nelson",
    "Baker",
    "Hall",
    "Rivera",
    "Campbell",
    "Mitchell",
    "Carter",
    "Roberts",
    "Gomez",
    "Phillips",
    "Evans",
    "Turner",
    "Diaz",
    "Parker",
    "Cruz",
    "Edwards",
    "Collins",
    "Reyes",
    "Stewart",
    "Morris",
    "Morales",
    "Murphy",
    "Cook",
    "Rogers",
    "Gutierrez",
    "Ortiz",
    "Morgan",
    "Cooper",
    "Peterson",
    "Bailey",
    "Reed",
    "Kelly",
    "Howard",
    "Ramos",
    "Kim",
    "Cox",
    "Ward",
    "Richardson",
    "Watson",
    "Brooks",
    "Chavez",
    "Wood",
    "James",
    "Bennett",
    "Gray",
    "Mendoza",
    "Ruiz",
    "Hughes",
    "Price",
    "Alvarez",
    "Castillo",
    "Sanders",
    "Patel",
    "Myers",
    "Long",
    "Ross",
    "Foster",
    "Jimenez"
  ];

  final List<String> descriptions = [
    "Great quality and comfort!",
    "Not what I expected.",
    "Excellent shoes, very comfortable.",
    "Would not recommend.",
    "Just okay, nothing special.",
    "Love these shoes, perfect fit!",
    "Terrible, broke after a week.",
    "Stylish and comfortable, highly recommend.",
    "Decent shoes for the price.",
    "Amazing, exceeded my expectations.",
    "Good value for money.",
    "Poor quality, very disappointed.",
    "Fantastic, will buy again.",
    "Not worth the price.",
    "Very satisfied with this purchase.",
    "Comfortable but not durable.",
    "Exactly what I was looking for.",
    "Disappointed, would not buy again.",
    "These shoes are fantastic!",
    "Fit perfectly, very happy.",
    "Not comfortable at all.",
    "Great design, love the look.",
    "Cheap materials, not worth it.",
    "Very happy with these shoes.",
    "Comfortable and stylish.",
    "Did not meet my expectations.",
    "Best shoes I've ever bought.",
    "Wouldn't buy again.",
    "These shoes are great!",
    "Low quality, not satisfied.",
    "Very comfortable, highly recommend.",
    "Look great but not durable.",
    "Perfect for everyday use.",
    "Fell apart quickly.",
    "Extremely comfortable and stylish.",
    "Poorly made, very disappointed.",
    "Great shoes for the price.",
    "Not worth the money.",
    "Highly recommend these shoes.",
    "Terrible fit, very uncomfortable.",
    "Love the style and comfort.",
    "Broke after a few uses.",
    "Very good quality, satisfied.",
    "Not as described, very disappointed.",
    "Excellent shoes, very happy.",
    "Would not recommend, poor quality.",
    "Perfect fit, love these shoes.",
    "Cheaply made, not worth it.",
    "Amazing quality and comfort.",
    "Not durable, fell apart.",
    "Very stylish and comfortable.",
    "Terrible shoes, do not buy.",
    "Great for the price.",
    "Not satisfied, poor quality.",
    "Highly satisfied with these shoes.",
    "Wouldn't recommend, bad quality.",
    "Comfortable and affordable.",
    "Not happy with this purchase.",
    "Love the look and feel.",
    "Very cheap materials.",
    "Great shoes, very durable.",
    "Poor quality, do not buy.",
    "Fit well and look great.",
    "Terrible quality, very disappointed.",
    "Very comfortable, great value.",
    "Cheaply made, not happy.",
    "Excellent value for money.",
    "Not worth buying.",
    "Highly recommend these shoes.",
    "Very uncomfortable, do not recommend.",
    "Love these shoes, very happy.",
    "Poorly made, not satisfied.",
    "Great fit and comfort.",
    "Not what I expected, very disappointed.",
    "Extremely satisfied with this purchase.",
    "Not worth the price, poor quality.",
    "Fantastic shoes, very comfortable.",
    "Would not buy again.",
    "Great value for the price.",
    "Very disappointed with these shoes.",
    "Comfortable and stylish, love them.",
    "Not durable, fell apart quickly.",
    "Highly recommend, very satisfied.",
    "Terrible quality, do not buy.",
    "Great shoes, very happy.",
    "Not satisfied, poor quality.",
    "Very comfortable, would buy again.",
    "Cheap materials, not worth it.",
    "Excellent shoes, highly recommend.",
    "Not worth the money, poor quality.",
    "Fantastic quality and comfort.",
    "Would not recommend, very disappointed.",
    "Very stylish, love these shoes.",
    "Poorly made, not satisfied.",
    "Great shoes for the price.",
    "Not durable, fell apart.",
    "Love the comfort and style.",
    "Terrible fit, very uncomfortable."
  ];

  final random = Random();
  final reviews = List.generate(100, (index) {
    final reviewerName =
        '${firstNames[random.nextInt(firstNames.length)]} ${lastNames[random.nextInt(lastNames.length)]}';
    final reviewStars = (random.nextInt(5) + 1).toDouble();
    final description = descriptions[random.nextInt(descriptions.length)];
    final reviewDate =
        DateTime.now().subtract(Duration(days: random.nextInt(365 * 2)));

    return ReviewDataModel(
      reviewerName: reviewerName,
      reviewStars: reviewStars,
      description: description,
      reviewDate: reviewDate,
    );
  });

  return reviews;
}
